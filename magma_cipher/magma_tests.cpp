#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>
#include "doctest.h"
#include "magma_cipher.hpp"

TEST_CASE("Key is invalid in simple replacement")
{
    CHECK_THROWS_WITH(magmaCipherDataIsValid (
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE}
        ), "The key must consist of thirty two eight-bit numbers");
}

TEST_CASE("Data is invalid in simple replacement")
{
    CHECK_THROWS_WITH(magmaCipherDataIsValid (
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}
        ), "The data must contain an integer number of encrypted blocks");
}

TEST_CASE("Key is invalid in gamming")
{
    CHECK_THROWS_WITH(magmaGammaCipherDataIsValid (
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}
        ), "The key must consist of thirty two eight-bit numbers");
}

TEST_CASE("Data is invalid in gamming")
{
    CHECK_THROWS_WITH(magmaGammaCipherDataIsValid (
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}
        ), "The data must contain an integer number of encrypted blocks");
}

TEST_CASE("Synchrolink is invalid")
{
    CHECK_THROWS_WITH(magmaGammaCipherDataIsValid (
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD}
        ), "Synchrolink should be same as data block");
}

TEST_CASE("Simple replacement encryption")
{
    std::vector<uint8_t> result{0x73, 0xc6, 0x77, 0xf6, 0xad, 0x75, 0xfd, 0x23, 0x73, 0xc6, 0x77, 0xf6, 0xad, 0x75, 0xfd, 0x23};
    CHECK(magmaEncrypt(
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}
        ) == result);
}

TEST_CASE("Simple replacement decryption")
{
    std::vector<uint8_t> result{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
    CHECK(magmaDecrypt(
        {0x73, 0xc6, 0x77, 0xf6, 0xad, 0x75, 0xfd, 0x23,
        0x73, 0xc6, 0x77, 0xf6, 0xad, 0x75, 0xfd, 0x23},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}
        ) == result);
}

TEST_CASE("Gamming encryption")
{
    std::vector<uint8_t> result{0x95, 0x9b, 0xfc, 0x2e, 0x4b, 0x56, 0x76, 0x97, 0x1f, 0x14, 0x03, 0xaa, 0xa9, 0x49, 0xbd, 0xe0};
    CHECK(magmaGammaEncrypt(
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}
        ) == result);
}

TEST_CASE("Gamming decryption")
{
    std::vector<uint8_t> result{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
    CHECK(magmaGammaDecrypt(
        {0x95, 0x9b, 0xfc, 0x2e, 0x4b, 0x56, 0x76, 0x97,
         0x1f, 0x14, 0x03, 0xaa, 0xa9, 0x49, 0xbd, 0xe0},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}
        ) == result);
}

TEST_CASE("Feedback gamming encryption")
{
    std::vector<uint8_t> result{0x72, 0xe5, 0x32, 0x91, 0x24, 0xde, 0x30, 0xcc, 0x28, 0x1d, 0x61, 0x4e, 0x4f, 0xf6, 0xa5, 0xc9};
    CHECK(magmaFeedbackGammaEncrypt(
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}
        ) == result);
}

TEST_CASE("Feedback gamming decryption")
{
    std::vector<uint8_t> result{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
    CHECK(magmaFeedbackGammaDecrypt(
        {0x72, 0xe5, 0x32, 0x91, 0x24, 0xde, 0x30, 0xcc,
         0x28, 0x1d, 0x61, 0x4e, 0x4f, 0xf6, 0xa5, 0xc9},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
        0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
        {0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF}
        ) == result);
}
